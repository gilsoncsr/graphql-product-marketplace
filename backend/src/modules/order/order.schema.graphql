type Order {
  id: ID!
  user: User!
  status: OrderStatus!
  totalAmount: Float!
  shippingAddress: String!
  billingAddress: String!
  paymentMethod: String!
  paymentStatus: PaymentStatus!
  trackingNumber: String
  notes: String
  createdAt: String!
  updatedAt: String!
  # Resolved fields
  items: [OrderItem!]!
}

type OrderItem {
  id: ID!
  order: Order!
  product: Product!
  quantity: Int!
  unitPrice: Float!
  totalPrice: Float!
  createdAt: String!
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

input PaymentInput {
  method: String!
  cardNumber: String
  expiryDate: String
  cvv: String
  billingAddress: String!
  shippingAddress: String!
  notes: String
}

input CreateOrderInput {
  items: [OrderItemInput!]!
  payment: PaymentInput!
}

input OrderItemInput {
  productId: ID!
  quantity: Int!
}

extend type Query {
  order(id: ID!): Order
  myOrders(pagination: CursorInput): OrderConnection!
}

extend type Mutation {
  createOrder(input: CreateOrderInput!): Order!
  updateOrderStatus(id: ID!, status: OrderStatus!): Order!
  cancelOrder(id: ID!): Order!
}

type OrderConnection {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderEdge {
  node: Order!
  cursor: String!
}
